package generate

import (
	"embed"
	"fmt"
	"go/format"
	"io/fs"
	"strings"

	"github.com/eduardolat/arbac/internal/schema"
)

//go:embed template/arbac.go
var arbacTpl string

//go:embed template/*_util.go
var utilsFS embed.FS

func GeneratePerms(
	version string,
	config schema.Config,
	perms schema.Perms,
) ([]byte, error) {
	permTpl := `// %s %s.
	var Perm%s = Perm{
		Name: "%s",
		Desc: "%s",
	}`
	permNameTpl := `Perm%s,`

	permsSl := []string{}
	namesSl := []string{}
	for _, perm := range perms {
		permsSl = append(permsSl, fmt.Sprintf(
			permTpl,
			perm.Name, perm.Desc, perm.Name, perm.Name, perm.Desc,
		))
		namesSl = append(namesSl, fmt.Sprintf(permNameTpl, perm.Name))
	}

	utilsSl := []string{}
	err := fs.WalkDir(utilsFS, ".", func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}

		if d.IsDir() {
			return nil
		}

		fileBytes, err := utilsFS.ReadFile(path)
		if err != nil {
			return err
		}

		codeBlock := removePackage(string(fileBytes), "template")
		utilsSl = append(utilsSl, codeBlock)

		return nil
	})
	if err != nil {
		return nil, fmt.Errorf("error reading the utils files: %w", err)
	}

	code := []string{
		fmt.Sprintf("// Code generated by ARBAC %s\n// DO NOT EDIT", version),
		strings.ReplaceAll(arbacTpl, "package template", "package "+config.Package),
	}

	codeStr := strings.Join(code, "\n\n")
	codeStr = strings.ReplaceAll(codeStr, "//*NAMES_HERE*//", strings.Join(namesSl, "\n"))
	codeStr = strings.ReplaceAll(codeStr, "//*PERMS_HERE*//", strings.Join(permsSl, "\n\n"))
	codeStr = strings.ReplaceAll(codeStr, "//*UTILS_HERE*//", strings.Join(utilsSl, "\n\n"))

	b, err := format.Source([]byte(codeStr))
	if err != nil {
		return nil, fmt.Errorf("error formatting the perms source: %w", err)
	}

	return b, nil
}
